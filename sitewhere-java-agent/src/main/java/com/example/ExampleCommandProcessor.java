/*
 * Copyright (c) SiteWhere, LLC. All rights reserved. http://www.sitewhere.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.example;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.sitewhere.agent.BaseCommandProcessor;
import com.sitewhere.agent.ISiteWhereEventDispatcher;
import com.sitewhere.agent.SiteWhereAgentException;
import com.sitewhere.communication.protobuf.proto.SiteWhere.Device.Header;
import com.sitewhere.communication.protobuf.proto.SiteWhere.Device.RegistrationAck;
import com.sitewhere.spi.device.event.IDeviceEventOriginator;

/**
 * Example of command processing from a protobuf descriptor generated by
 * SiteWhere.
 * 
 * @author Derek
 */
public class ExampleCommandProcessor extends BaseCommandProcessor {

    /** Static logger instance */
    private static Logger LOGGER = Logger.getLogger(ExampleCommandProcessor.class.getName());

    /** Executor for background processing */
    private ExecutorService executor = Executors.newSingleThreadExecutor();

    /*
     * (non-Javadoc)
     * 
     * @see com.sitewhere.agent.BaseCommandProcessor#executeStartupLogic(java.lang.
     * String, java.lang.String, com.sitewhere.agent.ISiteWhereEventDispatcher)
     */
    @Override
    public void executeStartupLogic(String deviceToken, String areaToken, String customerToken, String deviceTypeToken, ISiteWhereEventDispatcher dispatcher)
	    throws SiteWhereAgentException {
	sendRegistration(deviceToken, areaToken, customerToken, deviceTypeToken);
	LOGGER.info("Sent registration information.");
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.sitewhere.agent.BaseCommandProcessor#handleRegistrationAck(com.sitewhere.
     * device .communication.protobuf.proto.Sitewhere.Device.Header,
     * com.sitewhere.device.communication.protobuf.proto.Sitewhere.Device.
     * RegistrationAck)
     */
    @Override
    public void handleRegistrationAck(Header header, RegistrationAck ack) {
	switch (ack.getState()) {
	case NEW_REGISTRATION: {
	    LOGGER.info("SiteWhere indicated device was successfully registered.");
	    onRegistrationConfirmed(ack);
	    break;
	}
	case ALREADY_REGISTERED: {
	    LOGGER.info("SiteWhere indicated device is using an existing registration.");
	    onRegistrationConfirmed(ack);
	    break;
	}
	case REGISTRATION_ERROR: {
	    LOGGER.warning("SiteWhere indicated a device registration error.");
	    break;
	}
	case UNRECOGNIZED: {
	    break;
	}
	}
    }

    /**
     * Handle logic that should execute once registration is confirmed.
     * 
     * @param ack
     */
    public void onRegistrationConfirmed(RegistrationAck ack) {
	sendDataAtInterval();
    }

    /**
     * This is an example of creating a thread that will send data to SiteWhere
     * every so often, sleeping between cycles.
     */
    public void sendDataAtInterval() {

	// Run processing in another thread.
	LOGGER.info("Starting JVM memory statistics sender thread.");
	executor.execute(new Runnable() {

	    @Override
	    public void run() {
		while (true) {

		    // Get Java memory values from the runtime.
		    long free = Runtime.getRuntime().freeMemory();
		    long max = Runtime.getRuntime().maxMemory();
		    long total = Runtime.getRuntime().totalMemory();

		    try {
			// Send events to SiteWhere.
			sendMeasurement(getDeviceToken(), "jvmFreeMemory", free, null);
			sendMeasurement(getDeviceToken(), "jvmMaxMemory", max, null);
			sendMeasurement(getDeviceToken(), "jvmTotalMemory", total, null);
			LOGGER.info("Sent a batch of JVM memory statistics.");

			// Wait five second before sending next events.
			Thread.sleep(5000);
		    } catch (SiteWhereAgentException e) {
			LOGGER.log(Level.WARNING, "Unable to send measurements to SiteWhere.", e);
		    } catch (InterruptedException e) {
			LOGGER.log(Level.WARNING, "Event sender thread shut down.", e);
		    }
		}
	    }
	});
    }

    /**
     * Handler for 'helloWorld(String, boolean)' command.
     * 
     * @param greeting
     * @param loud
     * @param originator
     * @throws SiteWhereAgentException
     */
    public void helloWorld(String greeting, Boolean loud, IDeviceEventOriginator originator)
	    throws SiteWhereAgentException {
	String response = greeting + " World!";
	if (loud) {
	    response = response.toUpperCase();
	}
	sendAck(getDeviceToken(), response, originator);
	LOGGER.info("Sent reponse to 'helloWorld' command.");
    }

    /**
     * Handler for 'ping()' command.
     * 
     * @param originator
     * @throws SiteWhereAgentException
     */
    public void ping(IDeviceEventOriginator originator) throws SiteWhereAgentException {
	sendAck(getDeviceToken(), "Acknowledged.", originator);
	LOGGER.info("Sent reponse to 'ping' command.");
    }

    /**
     * Handler for 'testEvents()' command.
     * 
     * @param originator
     * @throws SiteWhereAgentException
     */
    public void testEvents(IDeviceEventOriginator originator) throws SiteWhereAgentException {
	sendMeasurement(getDeviceToken(), "engine.temp", 170.0, originator);
	sendLocation(getDeviceToken(), 33.7550, -84.3900, 0.0, originator);
	sendAlert(getDeviceToken(), "engine.overheat", "Engine is overheating!", originator);
	LOGGER.info("Sent reponse to 'testEvents' command.");
    }
}